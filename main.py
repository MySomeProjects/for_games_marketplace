import time

from telebot import TeleBot
import telebot

from keyboard import start_menu, main_menu, admin_menu, add_path
from database import (database_create_users, database_create_products, database_create_category,
                      database_create_for_admin_ids, database_create_mini_category, database_create_buy_request)
from func import new_user_register, get_individual_cabinet, get_user_by_id, update_referral_bonuses, \
    delete_category, get_all_products, save_new_category, get_category_by_id, get_all_categories, get_product_by_id, \
    delete_product, send_info_products, connection, changeinfo_products, \
    send_info_categories, changeinfo_control, send_info_control, send_info_users, \
    changeinfo_categories, get_all_mini_categories, send_info_mini_category, changeinfo_mini_category, \
    get_all_mini_categories_by_category, get_all_products_by_mini_category, get_mini_category_by_id, create_request, \
    changeinfo_users, create_request_bonus, get_all_user_ids, get_last_id, save_new_card, is_admin
from config import BOT_TOKEN

bot = TeleBot(BOT_TOKEN)

database_create_users()
database_create_category()
database_create_products()
database_create_for_admin_ids()
database_create_mini_category()
database_create_buy_request()


@bot.message_handler(commands=['start'])
def start(message):
    inviter_id = None
    if len(message.text.split()) > 1:
        inviter_id = int(message.text.split()[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if get_user_by_id(message.chat.id) is None:

        if inviter_id:
            if get_user_by_id(inviter_id) is not None:
                update_referral_bonuses(inviter_id)
            else:
                print(f"–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {inviter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")  # –û—Ç–ª–∞–¥–∫–∞

        new_user_register(message.chat.id, message)
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è {message.from_user.first_name}! –≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω FH_Shopüè™.\n\n"
                                      f"–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ —Ç–æ —á—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å "
                                      f"–ø—Ä–∏—è—Ç–Ω–µ–µ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–µ–µüëº.\n–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞,–ê–∫–∫–∞—É–Ω—Ç—ã,–ü–æ–¥–ø–∏—Å–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µüìÉ.\n"
                                      f"–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç–æ —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ –≤–∫—É—Å—É.\n\n –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã‚ù§Ô∏è",
                     reply_markup=start_menu(message.chat.id))


@bot.message_handler(func=lambda message: True)
def main_message_handlers(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìÉ":
        with open("images/IMG_20241105_074920_427.png", 'rb') as img:
            bot.send_photo(message.chat.id, photo=img, caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
                                              "–≠—Ç–æ —Å–∞–º—ã–π —á–µ—Å—Ç–Ω—ã–π –±–æ—Ç –ø–æ –¥–æ–Ω–∞—Ç–∞ –∏ –ø–æ–∫—É–ø–∫–∞–º\n"
                                              "–ù–∞—à –∫–∞–Ω–∞–ª https://t.me/FN_chik", reply_markup=main_menu())
    if message.text == "–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å‚å®Ô∏è":
        if is_admin(message.chat.id):
            bot.send_message(message.chat.id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu())
        else:
            return


@bot.callback_query_handler(func=lambda call: True)
def main_callback_handlers(call):
    if call.data == "individual_cabinet":
        info = get_individual_cabinet(call.message.chat.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

        markup = telebot.types.InlineKeyboardMarkup()
        cancel = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data="cancel_to_menu")
        markup.add(cancel)

        if info:
            bonuses = info['bonuses'] if info['bonuses'] is not None else 0  # –ó–∞–º–µ–Ω—è–µ–º None –Ω–∞ 0
            with open("images/IMG_20241105_074921_167.png", 'rb') as img:
                bot.send_photo(
                    call.message.chat.id,
                    photo=img,
                    caption=f"–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n"
                    f"–í–∞—à User ID: {info['user_id']}\n–í–∞—à–∏ –ë–æ–Ω—É—Å—ã: {bonuses}",
                    reply_markup=markup
                )
        else:
            bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    if call.data == "products":
        categories = get_all_categories()
        markup = telebot.types.InlineKeyboardMarkup()

        for category_id, name in categories:
            markup.add(telebot.types.InlineKeyboardButton(text=name, callback_data=f"category_{category_id}"))

        markup.add(telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="cancel_to_menu"))

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ö–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)

    if call.data == "referral_system":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        markup = telebot.types.InlineKeyboardMarkup()
        cancel = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data="cancel_to_menu")
        markup.add(cancel)
        info = get_individual_cabinet(call.message.chat.id)
        if info:
            bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{info['refferal']}\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ª—é–¥–µ–π"
                                                   f" –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ë–û–ù–£–°–´!!!", reply_markup=markup)

    if call.data == "add":
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        bot.register_next_step_handler(call.message, lambda message: step_for_add_with(message))

    # elif call.data == "add_without":
    #     bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–µ–∫—Å—Ç:")
    #     bot.register_next_step_handler(call.message, lambda message: step_for_add_without(message))

    elif call.data == "users_count":
        last_id = get_last_id()
        bot.send_message(call.message.chat.id, f"–í—Å–µ–≥–æ –≤ –±–æ—Ç–µ {last_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    elif call.data == "categories":
        categories = get_all_categories()
        markup = telebot.types.InlineKeyboardMarkup()

        for category_id, name in categories:
            markup.add(telebot.types.InlineKeyboardButton(text=name, callback_data=f"admin_category_{category_id}"))

        markup.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='add_category'))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    elif call.data == "mini_categories":
        mini_categories = get_all_mini_categories()
        markup = telebot.types.InlineKeyboardMarkup()

        for mini_category_id, name in mini_categories:
            verified = send_info_mini_category(mini_category_id, "verified")
            if verified == "True":
                markup.add(telebot.types.InlineKeyboardButton(text=name,
                                                              callback_data=f"admin_mini_category_{mini_category_id}"))

        markup.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –†–∞–∑–¥–µ–ª', callback_data='add_mini_category'))

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –†–∞–∑–¥–µ–ª:", reply_markup=markup)

    elif call.data == 'add_category':
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        bot.register_next_step_handler(call.message, lambda message: save_new_category(message))

    elif call.data == 'add_products':
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–¥—É–∫—Ç–∞:")
        bot.register_next_step_handler(call.message, lambda message: step_1_for_new_product(message))

    elif call.data == "add_mini_category":
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –†–∞–∑–¥–µ–ª–∞:")
        bot.register_next_step_handler(call.message, lambda message: step_1_for_new_mini_category(message))

    elif call.data == "admin_products":
        products = get_all_products()
        markup = telebot.types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        for product_id, product_name, verified in products:
            if verified == "True":
                markup.add(
                    telebot.types.InlineKeyboardButton(text=product_name, callback_data=f"products_{product_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        markup.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ü—Ä–æ–¥—É–∫—Ç', callback_data='add_products'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)

    elif call.data == "card":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:")
        bot.register_next_step_handler(call.message, lambda message: save_new_card(message))

    elif call.data.startswith("admin_category_"):
        category_id = int(call.data.split("_")[1])

        category = get_category_by_id(category_id)

        if category:
            id, category_name = category

            delete_markup = telebot.types.InlineKeyboardMarkup()
            delete_markup.add(telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_category_{category_id}"))

            bot.send_message(
                call.message.chat.id,
                f"ID –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}",
                reply_markup=delete_markup
            )
        else:
            bot.send_message(call.message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif call.data.startswith("admin_mini_category_"):
        mini_category_id = int(call.data.split("_")[3])

        category = get_mini_category_by_id(mini_category_id)

        if category:
            id, category_name = category

            photo = send_info_mini_category(mini_category_id, "mini_category_image")
            get_category_id = send_info_mini_category(mini_category_id, "category")
            category_id = send_info_categories(get_category_id, "category_name")

            delete_markup = telebot.types.InlineKeyboardMarkup()
            delete_markup.add(telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_mini_category_{mini_category_id}"))

            with open(f"{photo}", 'rb') as img:
                bot.send_photo(
                    call.message.chat.id,
                    photo=img,
                    caption=f"ID –†–∞–∑–¥–µ–ª–∞: {mini_category_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ –†–∞–∑–¥–µ–ª–∞: {category_name}\n"
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –†–∞–∑–¥–µ–ª–∞: {category_id}",
                    reply_markup=delete_markup
                )
        else:
            bot.send_message(call.message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif call.data.startswith("products_"):
        product_id = int(call.data.split("_")[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)

        product = get_product_by_id(product_id)

        if product:

            product_name = send_info_products(product_id, "product_name")

            delete_markup = telebot.types.InlineKeyboardMarkup()
            delete_markup.add(telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product_id}"))

            bot.send_message(
                call.message.chat.id,
                f"ID –ü—Ä–æ–¥—É–∫—Ç–∞: {product_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–¥—É–∫—Ç–∞: {product_name}",
                reply_markup=delete_markup
            )
        else:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif call.data.startswith("categories_"):
        category_id = int(call.data.split("_")[1])
        mini_category_id = send_info_control(1, "category_id")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        changeinfo_mini_category(mini_category_id, "category", category_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        mini_category_name = send_info_mini_category(mini_category_id, "mini_category_name")
        mini_category_image = send_info_mini_category(mini_category_id, "mini_category_image")
        category = send_info_categories(category_id, "category_name")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        apply_markup = telebot.types.InlineKeyboardMarkup()
        yes = telebot.types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"yes3_{mini_category_id}")
        no = telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"no3_{mini_category_id}")
        apply_markup.add(yes, no)

        with open(f"{mini_category_image}", 'rb') as img:
            bot.send_photo(
                call.message.chat.id,
                photo=img,
                caption=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ/–û—Ç–∫–ª–æ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –†–∞–∑–¥–µ–ª–∞\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –†–∞–∑–¥–µ–ª–∞: {mini_category_name}\n"
                f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –†–∞–∑–¥–µ–ª–∞: {category}",
                reply_markup=apply_markup
            )

    elif call.data.startswith("mini_categories_"):
        category_id = int(call.data.split("_")[2])
        product_id = send_info_control(1, "product_id")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        changeinfo_products(product_id, "mini_category", category_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        product_name = send_info_products(product_id, "product_name")
        product_price = send_info_products(product_id, "product_price")
        category = send_info_mini_category(category_id, "mini_category_name")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        apply_markup = telebot.types.InlineKeyboardMarkup()
        yes = telebot.types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"yes_{product_id}")
        no = telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"no_{product_id}")
        apply_markup.add(yes, no)

        bot.send_message(
            call.message.chat.id,
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ/–û—Ç–∫–ª–æ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞: {product_name}\n"
            f"–¶–µ–Ω–∞ –¢–æ–≤–∞—Ä–∞: {product_price}\n"
            f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –†–∞–∑–¥–µ–ª–∞: {category}",
            reply_markup=apply_markup
        )

    elif call.data.startswith("adds_yes_"):
        text = str(call.data.split("_")[2])
        adds_image = send_info_control(1, "add_image")
        user_ids = get_all_user_ids()

        for user_id in user_ids:
            print(user_id)
            try:
                with open(adds_image, "rb") as img:
                    bot.send_photo(user_id, photo=img, caption=text)
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            except telebot.apihelper.ApiException as e:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                if "blocked" in str(e):
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    elif call.data.startswith("adds_yeswithout_"):
        text = str(call.data.split("_")[2])
        user_ids = get_all_user_ids()

        for user_id in user_ids:
            print(user_id)
            print(text)
            try:
                bot.send_message(user_id, text)
                time.sleep(0.5)
            except telebot.apihelper.ApiException as e:
                if "blocked" in str(e):
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    elif call.data == "adds_no":
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith("category_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        category_id = int(call.data.split("_")[1])
        mini_categories = get_all_mini_categories_by_category(category_id)
        markup = telebot.types.InlineKeyboardMarkup()
        category_name = send_info_categories(category_id, "category_name")

        for mini_category_id, mini_category_name, category in mini_categories:
            verified = send_info_mini_category(mini_category_id, "verified")
            if verified == "True":
                markup.add(telebot.types.InlineKeyboardButton(text=mini_category_name,
                                                              callback_data=f"mini_category_{mini_category_id}"))

        markup.add(telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨ÖÔ∏èÔ∏è", callback_data="products"))

        bot.send_message(call.message.chat.id, f"–†–∞–∑–¥–µ–ª—ã –ò–∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}", reply_markup=markup)

    elif call.data.startswith("mini_category_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        mini_category_id = int(call.data.split("_")[2])
        products = get_all_products_by_mini_category(mini_category_id)
        markup = telebot.types.InlineKeyboardMarkup()
        category_name = send_info_mini_category(mini_category_id, "mini_category_name")
        mini_category_image = send_info_mini_category(mini_category_id, "mini_category_image")

        for product_id, product_name, product_price, category in products:
            verified = send_info_products(product_id, "verified")
            if verified == "True":
                markup.add(telebot.types.InlineKeyboardButton(text=f"{product_name} | {product_price}‚ÇΩ",
                                                              callback_data=f"product_{product_id}"))

        markup.add(telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥‚¨ÖÔ∏èÔ∏è", callback_data="products"))

        with open(f'{mini_category_image}', 'rb') as img:
            bot.send_photo(call.message.chat.id, photo=img,
                           caption=f"–¢–æ–≤–∞—Ä—ã –∏–∑ –†–∞–∑–¥–µ–ª–∞: {category_name}", reply_markup=markup)

    elif call.data.startswith("product_"):
        product_id = int(call.data.split("_")[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)

        product = get_product_by_id(product_id)

        if product:

            product_name = send_info_products(product_id, "product_name")
            mini_category_id = send_info_products(product_id, "mini_category")
            mini_category_name = send_info_mini_category(mini_category_id, "mini_category_name")
            category_id = send_info_mini_category(mini_category_id, "category")
            category_name = send_info_categories(category_id, "category_name")
            product_price = send_info_products(product_id, "product_price")

            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("–ö—É–ø–∏—Ç—åüõçÔ∏è", callback_data=f"buy_product_{product_id}"))
            markup.add(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è", callback_data=f"products"))

            bot.send_message(
                call.message.chat.id,
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¢–æ–≤–∞—Ä–∞: {category_name} | {mini_category_name}"
                f"\n–ù–∞–∑–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞: {product_name}\n–¶–µ–Ω–∞: {product_price}\n",
                reply_markup=markup
            )
        else:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif call.data.startswith("buy_product_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = int(call.data.split("_")[2])
        user_info = bot.get_chat(call.message.chat.id)
        username = user_info.username

        product_name = send_info_products(product_id, "product_name")
        product_price = send_info_products(product_id, "product_price")

        card = send_info_control(1, "card")

        bonuses = send_info_users(call.message.chat.id, "bonuses")
        if bonuses is None:
            bonuses = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 0, –µ—Å–ª–∏ –±–æ–Ω—É—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

        bonus_markup = telebot.types.InlineKeyboardMarkup()
        bonus_markup.add(telebot.types.InlineKeyboardButton("–î–∞‚úÖ", callback_data=f"bonus_yes_{product_id}"))
        bonus_markup.add(telebot.types.InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data=f"bonus_no_{product_id}"))

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ', callback_data=f"apply_product_buy_{product_id}"))

        if bonuses > 0:
            bot.send_message(call.message.chat.id, f"–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –µ—Å—Ç—å {bonuses} –±–æ–Ω—É—Å–æ–≤. –•–æ—Ç–∏—Ç–µ –∏–º–∏ "
                                                   f"–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", reply_markup=bonus_markup)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –±–æ–Ω—É—Å–æ–≤
            if username is None:
                bot.send_message(call.message.chat.id,
                                 "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫–Ω–µ–π–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
                return
            else:
                bot.send_message(call.message.chat.id, f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {product_name} –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ "
                                                       f"{product_price}‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –Ω–∏–∂–µ.\n"
                                                       f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
                bot.send_message(call.message.chat.id, f"{card}", reply_markup=markup)

    elif call.data.startswith("bonus_yes_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = int(call.data.split("_")[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        product_name = send_info_products(product_id, "product_name")
        product_price = send_info_products(product_id, "product_price")
        card = send_info_control(1, "card")
        user_info = bot.get_chat(call.message.chat.id)
        username = user_info.username

        bonuses = send_info_users(call.message.chat.id, "bonuses")

        bonus_price = product_price - bonuses

        apply_bonus_markup = telebot.types.InlineKeyboardMarkup()
        apply_bonus_markup.add(telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ',
                                                                  callback_data=f"apply_product_bonus_{product_id}"))

        if username is None:
            bot.send_message(call.message.chat.id,
                             "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫–Ω–µ–π–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
            return
        else:
            bot.send_message(call.message.chat.id,
                             f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {product_name} –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus_price}"
                             f"‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –Ω–∏–∂–µ.\n"
                             f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")

            bot.send_message(call.message.chat.id, f"{card}", reply_markup=apply_bonus_markup)

    elif call.data.startswith("bonus_no_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        card = send_info_control(1, "card")
        product_id = int(call.data.split("_")[2])
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ', callback_data=f"apply_product_buy_{product_id}"))
        product_name = send_info_products(product_id, "product_name")
        product_price = send_info_products(product_id, "product_price")
        user_info = bot.get_chat(call.message.chat.id)
        username = user_info.username
        if username is None:
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫–Ω–µ–π–º —á—Ç–æ –º—ã –±—ã"
                                                   "–º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
            return
        else:
            bot.send_message(call.message.chat.id, f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {product_name} –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ "
                                                   f"{product_price}‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –Ω–∏–∂–µ.\n"
                                                   f"–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
            bot.send_message(call.message.chat.id, f"{card}", reply_markup=markup)

    elif call.data.startswith("apply_product_buy_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = int(call.data.split("_")[3])
        user_info = bot.get_chat(call.message.chat.id)
        username = user_info.username

        if username is None:
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫–Ω–µ–π–º —á—Ç–æ –º—ã –±—ã"
                                                   "–º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
        else:
            bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
            bot.register_next_step_handler(call.message, lambda message: create_request(message=message,
                                                                                        user_id=call.message.chat.id,
                                                                                        product_id=product_id,
                                                                                        username=username,
                                                                                        ))

    elif call.data.startswith("apply_product_bonus_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        product_id = int(call.data.split("_")[3])
        user_info = bot.get_chat(call.message.chat.id)
        username = user_info.username

        bonuses = send_info_users(call.message.chat.id, "bonuses")
        changeinfo_users(call.message.chat.id, "bonuses", 0)

        if username is None:
            bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —Ç–µ–ª–µ–≥—Ä–∞–º –ù–∏–∫–Ω–µ–π–º —á—Ç–æ –º—ã –±—ã"
                                                   "–º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
        else:
            bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
            bot.register_next_step_handler(call.message, lambda message: create_request_bonus(message=message,
                                                                                        user_id=call.message.chat.id,
                                                                                        product_id=product_id,
                                                                                        username=username,
                                                                                        bonus=bonuses))

    elif call.data.startswith("yes_"):
        product_id = int(call.data.split("_")[1])
        changeinfo_products(product_id, "verified", "True")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä")

    elif call.data.startswith("no_"):
        product_id = int(call.data.split("_")[1])
        changeinfo_products(product_id, "verified", "False")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

    elif call.data.startswith("yes3_"):
        mini_category_id = int(call.data.split("_")[1])
        changeinfo_mini_category(mini_category_id, "verified", "True")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –†–∞–∑–¥–µ–ª")

    elif call.data.startswith("no3_"):
        mini_category_id = int(call.data.split("_")[1])
        changeinfo_mini_category(mini_category_id, "verified", "False")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –†–∞–∑–¥–µ–ª–∞")

    elif call.data.startswith("delete_category_"):
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        category_id = int(call.data.split("_")[2])
        delete_category(category_id)
        bot.send_message(call.message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=admin_menu())

    elif call.data.startswith("delete_product_"):
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        product_id = int(call.data.split("_")[2])
        delete_product(product_id)
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω.", reply_markup=admin_menu())

    elif call.data == 'cancel_to_menu':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:", reply_markup=main_menu())


def step_1_for_new_product(message):
    product = message.text
    cursor = connection.cursor()
    cursor.execute("INSERT INTO Products (product_name) VALUES (?)", (product,))
    connection.commit()
    product_id = cursor.lastrowid
    changeinfo_control(1, "product_id", product_id)
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, lambda message: step_2_for_new_product(message, product_id))


def step_2_for_new_product(message, product_id):
    mini_categories = get_all_mini_categories()
    markup = telebot.types.InlineKeyboardMarkup()

    for mini_category_id, mini_category_name in mini_categories:
        verified = send_info_mini_category(mini_category_id, "verified")
        if verified == "True":
            markup.add(telebot.types.InlineKeyboardButton(text=mini_category_name,
                                                          callback_data=f"mini_categories_{mini_category_id}"))

    product_price = float(message.text)
    changeinfo_products(product_id, "product_price", product_price)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)


def step_1_for_new_mini_category(message):
    mini_category = message.text
    cursor = connection.cursor()
    cursor.execute("INSERT INTO Mini_Category (mini_category_name) VALUES (?)", (mini_category,))
    connection.commit()
    mini_category_id = cursor.lastrowid
    changeinfo_control(1, "category_id", mini_category_id)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –†–∞–∑–¥–µ–ª—É:")
    bot.register_next_step_handler(message, lambda message: step_2_for_new_mini_category(message, mini_category_id))


def step_2_for_new_mini_category(message, mini_category_id):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        categories = get_all_categories()
        markup = telebot.types.InlineKeyboardMarkup()

        file_name = f'images/{message.chat.id}_{message.message_id}.jpg'
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        changeinfo_mini_category(mini_category_id, 'mini_category_image', str(file_name))


        for category_id, name in categories:
            markup.add(telebot.types.InlineKeyboardButton(text=name, callback_data=f"categories_{category_id}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–∑–¥–µ–ª–∞:", reply_markup=markup)


def step_for_add_with(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        file_name = f'adds_images/{message.chat.id}_{message.message_id}.jpg'
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        changeinfo_control(1, 'add_image', str(file_name))

        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –û–±—ä—è–≤–ª–µ–Ω–∏—è")
        bot.register_next_step_handler(message, lambda message: step_for_add_with_2(message))


def step_for_add_with_2(message):
    add_text = message.text
    add_image = send_info_control(1, "add_image")

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"adds_yes_{add_text}"))
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå", callback_data="adds_no"))

    with open(add_image, "rb") as img:
        bot.send_photo(message.chat.id, photo=img, caption=add_text, reply_markup=markup)


def step_for_add_without(message):
    add_text = message.text

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ", callback_data=f"adds_yeswithout_{add_text}"))
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå", callback_data="adds_no"))

    bot.send_message(message.chat.id, add_text, reply_markup=markup)



bot.polling()